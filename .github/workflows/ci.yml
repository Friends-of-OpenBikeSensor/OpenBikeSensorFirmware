name: OpenBikeSensor - CI
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
    # could use a container with sq tools already installed
       image: infinitecoding/platformio-for-ci:latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Prepare source
      run: |
        mkdir bin
        echo GITHUB Ref: ${{ github.ref }}
        VERSION_STRING=`grep "const char \*OBSVersion =" src/OpenBikeSensorFirmware.cpp`
        MAJOR=`echo ${VERSION_STRING} | cut -f2 -d\"`
        if [ "${{ github.ref }}" = "refs/heads/master" ]
        then
          PATCH=${GITHUB_RUN_NUMBER}
          SEPARATOR=.
          PREPARE_RELEASE=true
        else
          PATCH=RC${GITHUB_RUN_NUMBER}
          SEPARATOR=-
          PREPARE_RELEASE=false
        fi
        VERSION=${MAJOR}${SEPARATOR}${PATCH}
        echo "OBS_PREPARE_RELEASE=${PREPARE_RELEASE}" >> $GITHUB_ENV
        echo "OBS_VERSION=${VERSION}" >> $GITHUB_ENV
        echo "OBS_MAJOR_VERSION=${MAJOR}" >> $GITHUB_ENV
        echo $VERSION > VERSION
        echo Building OBS Version: $VERSION
        sed -i 's|-DBUILD_NUMBER=\\"-dev\\"|-DBUILD_NUMBER=\\"'${SEPARATOR}${PATCH}'\\"|' platformio.ini

    - name: Install SonarQube dependencies
      run: |
        mkdir -p sonarqube
        cd sonarqube
        wget --no-verbose https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip -qq build-wrapper-linux-x86.zip
        wget --no-verbose https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.5.0.2216-linux.zip
        unzip -qq sonar-scanner-cli-4.5.0.2216-linux.zip
        cd ..
        mkdir sonarqube-out
        apt-get update
        apt-get install -qq -y zip

    - name: Build firmware
      run: |
        ./sonarqube/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir sonarqube-out \
          platformio ci --build-dir="./bin" --keep-build-dir --project-conf=platformio.ini ./src/
        ls -l sonarqube-out

    - name: Package firmware
      run: |
        zip --junk-paths obs-${{ env.OBS_VERSION }}.zip bin/.pio/build/esp32dev/firmware.bin

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: SonarQube
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ./sonarqube/sonar-scanner-4.5.0.2216-linux/bin/sonar-scanner \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.organization=friends-of-openbikesensor \
          -Dsonar.projectKey=Friends-of-OpenBikeSensor_OpenBikeSensorFirmware \
          -Dsonar.cpd.exclusions=bin/**/* \
          -Dsonar.coverage.exclusions=**/* \
          -Dsonar.sources=. \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.cfamily.cache.enabled=false \
          -Dsonar.cfamily.threads=1 \
          -Dsonar.cfamily.build-wrapper-output=sonarqube-out \
          -Dsonar.projectVersion=${{ env.OBS_MAJOR_VERSION }}

    - name: Upload result artifact
      uses: actions/upload-artifact@v2
      with:
        name: obs ${{ env.OBS_VERSION }}
        path: |
          bin/.pio/build/esp32dev/firmware.bin
          sonarqube-out/
        if-no-files-found: error

    - name: Create Release
      id: create_release
      if: ${{ env.OBS_PREPARE_RELEASE == 'true' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.OBS_VERSION }}
        release_name: ${{ env.OBS_VERSION }}
        body: |
          Version ${{ env.OBS_VERSION }} based on ${{ github.ref }} ${{ github.sha }}
        draft: true
        prerelease: true

    - name: Upload Release Asset
      id: upload-release-asset
      if: ${{ env.OBS_PREPARE_RELEASE == 'true' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./obs-${{ env.OBS_VERSION }}.zip
        asset_name: obs-${{ env.OBS_VERSION }}.zip
        asset_content_type: application/zip

#  super-lint:
#    # Name the Job
#    name: Lint code base
#    # Set the type of machine to run on
#    runs-on: ubuntu-latest

#    steps:
#      # Checks out a copy of your repository on the ubuntu-latest machine
#      - name: Checkout code
#        uses: actions/checkout@v2

      # Runs the Super-Linter action
#      - name: Run Super-Linter
#        uses: github/super-linter@v3
#        env:
#          DEFAULT_BRANCH: master
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          FILTER_REGEX_EXCLUDE: .*/\.idea/.*
